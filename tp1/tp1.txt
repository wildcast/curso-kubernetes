## TP1
En este TP la idea es familiarizarse con `kubectl` y el ciclo de vida básico de la creación de un pod y deployment. Tambíen se pide
crear un pod multi-container para así aprender cómo los containers dentro del mismo interactúan entre sí.

1. Listar todos los namespaces en un cluster

BRUNOHORTELANO:dockercoins brunohortelano$ kubectl get namespaces
NAME              STATUS   AGE
default           Active   40h
kube-node-lease   Active   40h
kube-public       Active   40h
kube-system       Active   40h


2. Listar todos los PODS en todos los namespaces

BRUNOHORTELANO:dockercoins brunohortelano$ kubectl get pods -A
NAMESPACE     NAME                       READY   STATUS    RESTARTS   AGE
kube-system   aws-node-qfdqm             1/1     Running   0          39h
kube-system   aws-node-tjsrf             1/1     Running   0          39h
kube-system   coredns-59dfd6b59f-6vv6r   1/1     Running   0          40h
kube-system   coredns-59dfd6b59f-97hqr   1/1     Running   0          40h
kube-system   kube-proxy-bbpnj           1/1     Running   0          39h
kube-system   kube-proxy-mvrcb           1/1     Running   0          39h

3. Listar los pods en un namespace en particular

BRUNOHORTELANO:dockercoins brunohortelano$ kubectl get pods --namespace kube-system
NAME                       READY   STATUS    RESTARTS   AGE
aws-node-qfdqm             1/1     Running   0          40h
aws-node-tjsrf             1/1     Running   0          40h
coredns-59dfd6b59f-6vv6r   1/1     Running   0          40h
coredns-59dfd6b59f-97hqr   1/1     Running   0          40h
kube-proxy-bbpnj           1/1     Running   0          40h
kube-proxy-mvrcb           1/1     Running   0          40h


4. Crear un POD con 3 containers busybox que realizen los iguiente:
	- `ls; sleep 3600`
	- `echo "Hello World"; sleep 3600`
	- `echo "Este es el 3er contenedor"; sleep 3600`

kubectl create -f ./busybox.yaml

5. Una vez creados los mismos chequear su estado

kubectl get pod busybox-multicontainer -o wide

6. Crear un deployment llamado `webapp` con una imagen de nginx con 2 replicas. Luego:

kubectl apply -f ./nginx-deployment.yaml

	* Obtener el deployment creado y mostrar tus labels 

	kubectl get deployment nginx-deployment -o wide --show-labels

	* Obtener el archivo yaml del deployment creado 

	kubectl get deployment nginx-deployment -o yaml

	* Mostrar los pods corriendo del deployment 

	kubectl get pods -l app=nginx

	* Escalar el deployment de 2 a 5 replicas y verificar que funciona correctamente 

	kubectl scale --replicas=5 deployment nginx-deployment

	* Obtener el estado del scale-up del deployment 

	kubectl describe deployment/nginx-deployment
	
	* Mostrar el replicaset creado por el deployment 

	kubectl get replicaset -l app=nginx

